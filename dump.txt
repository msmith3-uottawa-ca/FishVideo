Loading:	C:/Users/jlewislabo/Documents/Research/2017-06-27_15-46-23.mp4
Select Tank Diagonal (outer)
Select First Electrode (left most)
Select Points Around Fish
Zoom, right click then center click

Select 4 Points Around Fish (Continuous Rectangle)

Filename: main_interface.py

Line #    Mem usage    Increment   Line Contents
================================================
    28 118.8281 MiB   0.0000 MiB       @profile(precision=4)
    29                                 def run(self):
    30                                     # scaling
    31 118.8281 MiB   0.0000 MiB           with warnings.catch_warnings():
    32 118.8281 MiB   0.0000 MiB               warnings.simplefilter("ignore")
    33 123.1055 MiB   4.2773 MiB               c = cv2.VideoCapture(self.fileName)
    34                             
    35 123.1172 MiB   0.0117 MiB               fps = c.get(cv2.CAP_PROP_FPS)
    36 123.1172 MiB   0.0000 MiB               nFrames = c.get(cv2.CAP_PROP_FRAME_COUNT)
    37                             
    38 130.4922 MiB   7.3750 MiB               ret, f = c.read()
    39 135.7383 MiB   5.2461 MiB               fig, ax = plt.subplots()
    40 138.4766 MiB   2.7383 MiB               ax.imshow(f)
    41 138.4766 MiB   0.0000 MiB               print('Select Tank Diagonal (outer)')
    42 143.8125 MiB   5.3359 MiB               scalePts = plt.ginput(n=2, timeout=0)
    43 143.8438 MiB   0.0312 MiB               plt.close()
    44                             
    45                                     # scaling
    46 143.8438 MiB   0.0000 MiB           with warnings.catch_warnings():
    47 143.8438 MiB   0.0000 MiB               warnings.simplefilter("ignore")
    48 138.0586 MiB  -5.7852 MiB               c = cv2.VideoCapture(self.fileName)
    49 144.9883 MiB   6.9297 MiB               ret, f = c.read()
    50 144.9883 MiB   0.0000 MiB               fig, ax = plt.subplots()
    51 147.6406 MiB   2.6523 MiB               ax.imshow(f)
    52 147.6406 MiB   0.0000 MiB               print('Select First Electrode (left most)')
    53 150.1562 MiB   2.5156 MiB               first_elec_pt = plt.ginput(n=1, timeout=0)
    54 150.1562 MiB   0.0000 MiB               plt.close()
    55                             
    56                                     # inpainting
    57 150.1562 MiB   0.0000 MiB           with warnings.catch_warnings():
    58 150.1562 MiB   0.0000 MiB               warnings.simplefilter("ignore")
    59 144.2227 MiB  -5.9336 MiB               c = cv2.VideoCapture(self.fileName)
    60 150.3633 MiB   6.1406 MiB               ret, f = c.read()
    61 150.3633 MiB   0.0000 MiB               fig, ax = plt.subplots()
    62 153.0117 MiB   2.6484 MiB               ax.imshow(f)
    63 153.0117 MiB   0.0000 MiB               print('Select Points Around Fish')
    64 153.0117 MiB   0.0000 MiB               print('Zoom, right click then center click')
    65 153.0117 MiB   0.0000 MiB               print('')
    66 155.5273 MiB   2.5156 MiB               inpaintPoints = plt.ginput(n=0, timeout=0)
    67 155.5273 MiB   0.0000 MiB               plt.close()
    68                             
    69                                     """
    70                                     Inpainting
    71                                     """
    72 155.5273 MiB   0.0000 MiB           fishMask = np.zeros(f.shape, dtype=np.uint8)
    73 155.6367 MiB   0.1094 MiB           cv2.fillPoly(fishMask, np.array([inpaintPoints], 'int32'), (255, 255, 255))
    74 155.8594 MiB   0.2227 MiB           fishMask = cv2.cvtColor(fishMask, cv2.COLOR_BGR2GRAY)
    75 155.8594 MiB   0.0000 MiB           f = cv2.cvtColor(f, cv2.COLOR_BGR2GRAY)
    76                             
    77 156.2109 MiB   0.3516 MiB           dst_NS = cv2.inpaint(f, fishMask, 3, cv2.INPAINT_NS)
    78 156.2109 MiB   0.0000 MiB           bg = dst_NS;
    79                             
    80                                     """
    81                                     Roi selection: fish
    82                                     """
    83                             
    84 156.2109 MiB   0.0000 MiB           print 'Select 4 Points Around Fish (Continuous Rectangle)'
    85 156.2109 MiB   0.0000 MiB           print ''
    86 156.2109 MiB   0.0000 MiB           key = 0
    87 156.2109 MiB   0.0000 MiB           scale = 0.4
    88 150.2422 MiB  -5.9688 MiB           c = cv2.VideoCapture(self.fileName)
    89 150.2734 MiB   0.0312 MiB           cv2.namedWindow("frame")
    90 150.2812 MiB   0.0078 MiB           cv2.setMouseCallback("frame", self.selectROI)
    91 156.2031 MiB   5.9219 MiB           (grabbed, self.frame) = c.read()
    92 157.1055 MiB   0.9023 MiB           cv2.imshow('frame', self.frame)
    93 157.1484 MiB   0.0430 MiB           while len(self.roiPts) < 4:
    94 157.1484 MiB   0.0000 MiB               cv2.imshow("frame", self.frame)
    95 157.1484 MiB   0.0000 MiB               cv2.waitKey(1)
    96                             
    97 157.7656 MiB   0.6172 MiB           fishMask = np.zeros(self.frame.shape, dtype=np.uint8)
    98 157.7656 MiB   0.0000 MiB           cv2.fillPoly(fishMask, np.array([self.roiPts]), (255, 255, 255))
    99 157.7656 MiB   0.0000 MiB           fishMask = cv2.cvtColor(fishMask, cv2.COLOR_BGR2GRAY)
   100 156.8906 MiB  -0.8750 MiB           cv2.destroyAllWindows()
   101                             
   102                                     """
   103                                     Bg subtraction
   104                                     """
   105                             
   106 150.9961 MiB  -5.8945 MiB           c = cv2.VideoCapture(self.fileName)
   107 150.9961 MiB   0.0000 MiB           kernel = np.ones((5, 5), np.uint8)
   108 156.8750 MiB   5.8789 MiB           ret, f = c.read()
   109 156.8750 MiB   0.0000 MiB           f = cv2.cvtColor(f, cv2.COLOR_BGR2GRAY)
   110 156.8789 MiB   0.0039 MiB           f = np.multiply(fishMask, f);
   111 157.0156 MiB   0.1367 MiB           f = cv2.blur(f, (5, 5))
   112 157.0156 MiB   0.0000 MiB           bg = np.multiply(fishMask, bg)
   113 157.0156 MiB   0.0000 MiB           bg = cv2.blur(bg, (5, 5))
   114 157.0156 MiB   0.0000 MiB           diff = f - bg;
   115                             
   116                                     """
   117                                     bidirthresh fish
   118                                     """
   119 157.0156 MiB   0.0000 MiB           k = 0
   120 157.0156 MiB   0.0000 MiB           cv2.namedWindow('Tracking')
   121 157.0273 MiB   0.0117 MiB           cv2.createTrackbar('Lower', 'Tracking', 25, 255, self.nothing)
   122 157.0312 MiB   0.0039 MiB           cv2.createTrackbar('Upper', 'Tracking', 150, 255, self.nothing)
   123 157.9219 MiB   0.8906 MiB           cv2.imshow('Frame', diff)
   124                             
   125 157.9219 MiB   0.0000 MiB           while (1):
   126 158.9258 MiB   1.0039 MiB               try:
   127 158.9258 MiB   0.0000 MiB                   lowerThreshFish = cv2.getTrackbarPos('Lower', 'Tracking')
   128 158.9258 MiB   0.0000 MiB                   upperThreshFish = cv2.getTrackbarPos('Upper', 'Tracking')
   129 158.9258 MiB   0.0000 MiB                   if lowerThreshFish >= upperThreshFish:
   130                                                 lowerThreshFish = upperThreshFish - 1
   131 158.9258 MiB   0.0000 MiB                   biDirThreshFish = cv2.inRange(diff, lowerThreshFish, upperThreshFish)
   132 158.9258 MiB   0.0000 MiB                   biDirThreshFish = cv2.morphologyEx(biDirThreshFish, cv2.MORPH_CLOSE, kernel)
   133                             
   134 158.9258 MiB   0.0000 MiB                   cv2.imshow('Tracking', biDirThreshFish)
   135 158.9375 MiB   0.0117 MiB                   k = cv2.waitKey(1)
   136                             
   137 158.9375 MiB   0.0000 MiB                   if k == 27:
   138 158.9375 MiB   0.0000 MiB                       break
   139                                         except:
   140                                             cv2.imshow('Frame', np.zeros(5))
   141                                             k = cv2.waitKey(1)
   142                                             print("Failed in Bidirectional Thresholding")
   143                             
   144 157.1758 MiB  -1.7617 MiB           cv2.destroyAllWindows()
   145                             
   146 157.1758 MiB   0.0000 MiB           k = 0
   147                             
   148 157.1758 MiB   0.0000 MiB           fishPosX = []
   149 157.1758 MiB   0.0000 MiB           fishPosY = []
   150 151.2812 MiB  -5.8945 MiB           c = cv2.VideoCapture(self.fileName)
   151 151.2812 MiB   0.0000 MiB           while (1):
   152 1903.6445 MiB 1752.3633 MiB               ret, img = c.read()
   153 1903.6445 MiB   0.0000 MiB               if not ret:
   154                                             break
   155                             
   156 1903.6445 MiB   0.0000 MiB               fish = np.copy(img)
   157 1903.6445 MiB   0.0000 MiB               fish = cv2.cvtColor(fish, cv2.COLOR_BGR2GRAY)
   158                             
   159 1903.6445 MiB   0.0000 MiB               fish = np.multiply(fish, fishMask)
   160 1903.6445 MiB   0.0000 MiB               fish = cv2.blur(fish, (5, 5))
   161 1903.6445 MiB   0.0000 MiB               diff = fish - bg;
   162                             
   163 1903.6445 MiB   0.0000 MiB               biDirThreshFish = cv2.inRange(diff, lowerThreshFish, upperThreshFish)
   164 1903.6445 MiB   0.0000 MiB               biDirThreshFish = cv2.morphologyEx(biDirThreshFish, cv2.MORPH_CLOSE, kernel)
   165                             
   166 1903.6445 MiB   0.0000 MiB               im, contoursFish, hierarchy = cv2.findContours(np.copy(biDirThreshFish), cv2.RETR_TREE,
   167 1903.6445 MiB   0.0000 MiB                                                              cv2.CHAIN_APPROX_SIMPLE)
   168                             
   169 1903.6445 MiB   0.0000 MiB               cv2.imshow('Tracking', biDirThreshFish)
   170                             
   171 1903.6445 MiB   0.0000 MiB               max_areaFish = 0
   172 1903.6445 MiB   0.0000 MiB               best_iFish = 0
   173 1903.6445 MiB   0.0000 MiB               i = 0
   174 1903.6445 MiB   0.0000 MiB               for cnt in contoursFish:
   175 1903.6445 MiB   0.0000 MiB                   area = cv2.contourArea(cnt)
   176 1903.6445 MiB   0.0000 MiB                   if area > max_areaFish:
   177 1903.6445 MiB   0.0000 MiB                       max_areaFish = area
   178 1903.6445 MiB   0.0000 MiB                       best_cntFish = cnt
   179 1903.6445 MiB   0.0000 MiB                       best_iFish = i
   180 1903.6445 MiB   0.0000 MiB                   i = i + 1
   181                             
   182 1903.6445 MiB   0.0000 MiB               cv2.drawContours(img, contoursFish, best_iFish, (0, 255, 0), 3)
   183                             
   184 1901.3008 MiB  -2.3438 MiB               tmpImgFish = np.zeros(np.shape(img)[:2])
   185 1901.9844 MiB   0.6836 MiB               cv2.drawContours(tmpImgFish, contoursFish, best_iFish, 1, -1)
   186 1906.0000 MiB   4.0156 MiB               plt.imshow(tmpImgFish)
   187                             
   188                             
   189 1906.0000 MiB   0.0000 MiB               M = cv2.moments(best_cntFish)
   190 1906.0000 MiB   0.0000 MiB               cx, cy = int(M['m10'] / M['m00']), int(M['m01'] / M['m00'])
   191 1906.0000 MiB   0.0000 MiB               fishPosX.append(cx)
   192 1906.0000 MiB   0.0000 MiB               fishPosY.append(cy)
   193 1906.0000 MiB   0.0000 MiB               cv2.circle(img, (cx, cy), 5, 255, -1)
   194                             
   195 1906.0000 MiB   0.0000 MiB               cv2.imshow('', img)
   196                             
   197 1906.0000 MiB   0.0000 MiB               k = cv2.waitKey(1)
   198                             
   199 1906.0000 MiB   0.0000 MiB               if (k == 27):
   200 1906.0000 MiB   0.0000 MiB                   return
   201                                             break
   202                             
   203                                     cv2.destroyAllWindows()
   204                                     plt.close('all')
   205                             
   206                                     # cm/px
   207                                     scale = self.scale_size / np.sqrt(
   208                                         (scalePts[0][0] - scalePts[1][0]) ** 2 + (scalePts[0][1] - scalePts[1][1]) ** 2)
   209                                     fishPosX = np.array(fishPosX)
   210                                     fishPosY = np.array(fishPosY)
   211                             
   212                                     fishPosX = fishPosX * scale
   213                                     fishPosY = fishPosY * scale
   214                             
   215                                     t = np.arange(nFrames) / fps
   216                             
   217                                     track_data = {'fishX': fishPosX, 'fishY': fishPosY, 'E0_X': self.scale_size / first_elec_pt[0][0],
   218                                                   'E0_Y': self.scale_size / first_elec_pt[0][1], 't': t * 1000, 'E0': 0, 'E1': 0, 'E2': 0,
   219                                                   'E3': 0,
   220                                                   'E4': 0, 'E5': 0, 'E6': 0, 'E7': 0, 'E8': 0, 'E9': 0}
   221                                     track_data = pd.DataFrame(track_data)
   222                             
   223                                     expt_data = pd.read_csv(self.fileName[:-4] + '.csv',
   224                                                             names=['t', 'E0', 'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9'])
   225                             
   226                                     names = ['E' + str(i) for i in np.arange(10)]
   227                                     track_data = track_data[track_data.t <= np.max(expt_data.t)]
   228                             
   229                                     for ix, t in enumerate(expt_data.t.values):
   230                                         n_larger = len(track_data[track_data.t > t])
   231                                         track_data.loc[len(track_data) - n_larger:, names] = expt_data.loc[ix, names].values
   232                             
   233                                     track_data.to_csv(self.csv_name)


